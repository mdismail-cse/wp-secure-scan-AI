class VulnerabilityScanner
  VULNERABILITY_PATTERNS = {
    'SQL Injection' => {
      patterns: [
        /\$wpdb->query\s*\(\s*[^$].*\$.*\)/i,
        /\$wpdb->get_results\s*\(\s*[^$].*\$.*\)/i,
        /\$wpdb->get_var\s*\(\s*[^$].*\$.*\)/i,
        /\$wpdb->get_row\s*\(\s*[^$].*\$.*\)/i,
        /mysql_query\s*\(\s*[^$].*\$.*\)/i,
        /mysqli_query\s*\(\s*[^$].*\$.*\)/i,
        /SELECT.*FROM.*WHERE.*\$_/i,
        /INSERT.*INTO.*VALUES.*\$_/i,
        /UPDATE.*SET.*\$_/i,
        /DELETE.*FROM.*WHERE.*\$_/i
      ],
      severity: 'critical'
    },
    'Stored XSS' => {
      patterns: [
        /echo\s+\$_(?:GET|POST|REQUEST)\[/i,
        /print\s+\$_(?:GET|POST|REQUEST)\[/i,
        /<\?=\s*\$_(?:GET|POST|REQUEST)\[/i,
        /echo.*\$_(?:GET|POST|REQUEST).*without.*esc_html/i,
        /printf?\s*\(\s*\$_(?:GET|POST|REQUEST)/i
      ],
      severity: 'high'
    },
    'Reflected XSS' => {
      patterns: [
        /echo\s+\$_GET\[/i,
        /print\s+\$_GET\[/i,
        /<\?=\s*\$_GET\[/i,
        /document\.write\s*\(\s*[^)]*\$_GET/i,
        /innerHTML\s*=.*\$_GET/i
      ],
      severity: 'high'
    },
    'Remote Code Execution' => {
      patterns: [
        /eval\s*\(\s*\$_(?:GET|POST|REQUEST)/i,
        /system\s*\(\s*\$_(?:GET|POST|REQUEST)/i,
        /exec\s*\(\s*\$_(?:GET|POST|REQUEST)/i,
        /shell_exec\s*\(\s*\$_(?:GET|POST|REQUEST)/i,
        /passthru\s*\(\s*\$_(?:GET|POST|REQUEST)/i,
        /popen\s*\(\s*\$_(?:GET|POST|REQUEST)/i,
        /proc_open\s*\(\s*\$_(?:GET|POST|REQUEST)/i,
        /assert\s*\(\s*\$_(?:GET|POST|REQUEST)/i,
        /preg_replace.*\/e.*\$_(?:GET|POST|REQUEST)/i,
        /create_function.*\$_(?:GET|POST|REQUEST)/i
      ],
      severity: 'critical'
    },
    'CSRF' => {
      patterns: [
        /\$_POST.*without.*wp_verify_nonce/i,
        /\$_GET.*admin.*without.*wp_verify_nonce/i,
        /wp_ajax.*without.*check_ajax_referer/i,
        /admin_post.*without.*wp_verify_nonce/i
      ],
      severity: 'medium'
    },
    'Broken Access Control' => {
      patterns: [
        /\$_GET\['action'\].*==.*'delete'.*without.*current_user_can/i,
        /\$_POST.*without.*current_user_can/i,
        /wp_ajax.*without.*current_user_can/i,
        /admin_init.*without.*current_user_can/i,
        /is_admin\(\).*without.*current_user_can/i
      ],
      severity: 'high'
    },
    'Arbitrary File Upload' => {
      patterns: [
        /move_uploaded_file.*\$_FILES.*without.*wp_check_filetype/i,
        /\$_FILES\[.*\]\['tmp_name'\].*move_uploaded_file/i,
        /file_put_contents.*\$_(?:GET|POST|REQUEST)/i,
        /fwrite.*\$_(?:GET|POST|REQUEST)/i,
        /fputs.*\$_(?:GET|POST|REQUEST)/i
      ],
      severity: 'critical'
    },
    'Arbitrary File Read' => {
      patterns: [
        /file_get_contents\s*\(\s*\$_(?:GET|POST|REQUEST)/i,
        /fopen\s*\(\s*\$_(?:GET|POST|REQUEST)/i,
        /readfile\s*\(\s*\$_(?:GET|POST|REQUEST)/i,
        /include\s*\(\s*\$_(?:GET|POST|REQUEST)/i,
        /require\s*\(\s*\$_(?:GET|POST|REQUEST)/i,
        /include_once\s*\(\s*\$_(?:GET|POST|REQUEST)/i,
        /require_once\s*\(\s*\$_(?:GET|POST|REQUEST)/i
      ],
      severity: 'high'
    },
    'Arbitrary File Write' => {
      patterns: [
        /file_put_contents\s*\(\s*\$_(?:GET|POST|REQUEST)/i,
        /fwrite\s*\(\s*.*\$_(?:GET|POST|REQUEST)/i,
        /fputs\s*\(\s*.*\$_(?:GET|POST|REQUEST)/i
      ],
      severity: 'critical'
    },
    'Arbitrary File Delete' => {
      patterns: [
        /unlink\s*\(\s*\$_(?:GET|POST|REQUEST)/i,
        /rmdir\s*\(\s*\$_(?:GET|POST|REQUEST)/i,
        /wp_delete_file\s*\(\s*\$_(?:GET|POST|REQUEST)/i
      ],
      severity: 'high'
    },
    'Local File Inclusion' => {
      patterns: [
        /include\s*\(\s*\$_(?:GET|POST|REQUEST)/i,
        /require\s*\(\s*\$_(?:GET|POST|REQUEST)/i,
        /include_once\s*\(\s*\$_(?:GET|POST|REQUEST)/i,
        /require_once\s*\(\s*\$_(?:GET|POST|REQUEST)/i
      ],
      severity: 'high'
    },
    'PHP Object Injection' => {
      patterns: [
        /unserialize\s*\(\s*\$_(?:GET|POST|REQUEST)/i,
        /unserialize\s*\(\s*base64_decode\s*\(\s*\$_(?:GET|POST|REQUEST)/i
      ],
      severity: 'critical'
    },
    'SSRF' => {
      patterns: [
        /wp_remote_get\s*\(\s*\$_(?:GET|POST|REQUEST)/i,
        /wp_remote_post\s*\(\s*\$_(?:GET|POST|REQUEST)/i,
        /curl_setopt.*CURLOPT_URL.*\$_(?:GET|POST|REQUEST)/i,
        /file_get_contents\s*\(\s*['"]https?:\/\/.*\$_(?:GET|POST|REQUEST)/i
      ],
      severity: 'medium'
    },
    'Open Redirect' => {
      patterns: [
        /wp_redirect\s*\(\s*\$_(?:GET|POST|REQUEST)/i,
        /header\s*\(\s*['"]Location:.*\$_(?:GET|POST|REQUEST)/i,
        /Location:\s*.*\$_(?:GET|POST|REQUEST)/i
      ],
      severity: 'medium'
    },
    'Type Juggling' => {
      patterns: [
        /==.*\$_(?:GET|POST|REQUEST).*['"]0['"]/i,
        /in_array\s*\(\s*\$_(?:GET|POST|REQUEST).*false\)/i,
        /array_search\s*\(\s*\$_(?:GET|POST|REQUEST).*false\)/i
      ],
      severity: 'low'
    },
    'Sensitive Data Exposure' => {
      patterns: [
        /var_dump\s*\(\s*\$_(?:GET|POST|REQUEST|SESSION)/i,
        /print_r\s*\(\s*\$_(?:GET|POST|REQUEST|SESSION)/i,
        /error_log\s*\(\s*.*\$_(?:GET|POST|REQUEST|SESSION)/i,
        /echo.*password.*\$/i,
        /print.*password.*\$/i
      ],
      severity: 'medium'
    }
  }.freeze

  def initialize(scan)
    @scan = scan
  end

  def analyze
    return unless @scan.plugin_file.attached?

    @scan.update(status: 'processing')
    
    begin
      extract_and_scan_files
      @scan.update(status: 'completed')
    rescue => e
      Rails.logger.error "Scan failed: #{e.message}"
      @scan.update(status: 'failed', scan_results: { error: e.message })
    end
  end

  private

  def extract_and_scan_files
    temp_dir = Rails.root.join('tmp', 'scans', @scan.id.to_s)
    FileUtils.mkdir_p(temp_dir)

    begin
      # Extract zip file
      @scan.plugin_file.open do |file|
        extract_zip(file.path, temp_dir)
      end

      # Scan extracted files
      scan_directory(temp_dir)
    ensure
      FileUtils.rm_rf(temp_dir)
    end
  end

  def extract_zip(zip_path, extract_to)
    Zip::File.open(zip_path) do |zip_file|
      zip_file.each do |entry|
        # Security check: prevent directory traversal
        next if entry.name.include?('..')
        
        file_path = File.join(extract_to, entry.name)
        FileUtils.mkdir_p(File.dirname(file_path))
        entry.extract(file_path) unless File.exist?(file_path)
      end
    end
  end

  def scan_directory(directory)
    Dir.glob(File.join(directory, '**', '*')).each do |file_path|
      next unless File.file?(file_path)
      next unless scannable_file?(file_path)

      scan_file(file_path, directory)
    end
  end

  def scannable_file?(file_path)
    extensions = %w[.php .js .html .json]
    extensions.any? { |ext| file_path.downcase.end_with?(ext) }
  end

  def scan_file(file_path, base_directory)
    content = File.read(file_path)
    relative_path = file_path.sub(base_directory + '/', '')

    VULNERABILITY_PATTERNS.each do |vuln_type, config|
      config[:patterns].each do |pattern|
        content.each_line.with_index(1) do |line, line_number|
          if line.match?(pattern)
            create_vulnerability(
              vuln_type,
              relative_path,
              line_number,
              line.strip,
              config[:severity]
            )
          end
        end
      end
    end
  end

  def create_vulnerability(type, file_path, line_number, code_snippet, severity)
    @scan.vulnerabilities.create!(
      vulnerability_type: type,
      file_path: file_path,
      line_number: line_number,
      code_snippet: code_snippet,
      severity: severity,
      description: generate_description(type, code_snippet)
    )
  end

  def generate_description(type, code_snippet)
    case type
    when 'SQL Injection'
      "Potential SQL injection vulnerability detected. User input may be directly concatenated into SQL query."
    when 'Stored XSS'
      "Stored Cross-Site Scripting vulnerability. User input is output without proper sanitization."
    when 'Reflected XSS'
      "Reflected Cross-Site Scripting vulnerability. GET parameter is echoed without sanitization."
    when 'Remote Code Execution'
      "Critical Remote Code Execution vulnerability. User input is passed to dangerous function."
    when 'CSRF'
      "Cross-Site Request Forgery vulnerability. Action performed without nonce verification."
    when 'Broken Access Control'
      "Access control bypass. Action performed without proper permission checks."
    when 'Arbitrary File Upload'
      "Arbitrary file upload vulnerability. Files uploaded without proper validation."
    when 'Arbitrary File Read'
      "Arbitrary file read vulnerability. User can read system files."
    when 'Arbitrary File Write'
      "Arbitrary file write vulnerability. User can write to system files."
    when 'Arbitrary File Delete'
      "Arbitrary file deletion vulnerability. User can delete system files."
    when 'Local File Inclusion'
      "Local File Inclusion vulnerability. User input used in file inclusion."
    when 'PHP Object Injection'
      "PHP Object Injection vulnerability. Unserialization of user input."
    when 'SSRF'
      "Server-Side Request Forgery vulnerability. User can make server requests."
    when 'Open Redirect'
      "Open redirect vulnerability. User can redirect to arbitrary URLs."
    when 'Type Juggling'
      "PHP type juggling vulnerability. Loose comparison may lead to bypass."
    when 'Sensitive Data Exposure'
      "Sensitive data exposure. Sensitive information may be leaked."
    else
      "Security vulnerability detected in code."
    end
  end
end