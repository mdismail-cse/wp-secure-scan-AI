class ReportGenerator
  def initialize(scan)
    @scan = scan
    @vulnerabilities = scan.vulnerabilities.includes(:scan)
    @ai_analysis = parse_ai_analysis
  end

  def generate_pdf
    pdf = Prawn::Document.new
    
    # Title
    pdf.text "WordPress Plugin Security Report", size: 24, style: :bold
    pdf.move_down 20
    
    # Plugin Info
    pdf.text "Plugin: #{@scan.plugin_name}", size: 16, style: :bold
    pdf.text "Scan Date: #{@scan.created_at.strftime('%B %d, %Y at %I:%M %p')}"
    pdf.text "Status: #{@scan.status.humanize}"
    pdf.move_down 20
    
    # Summary
    add_summary_to_pdf(pdf)
    
    # Vulnerabilities by Type
    add_vulnerabilities_to_pdf(pdf)
    
    # AI Analysis
    add_ai_analysis_to_pdf(pdf) if @ai_analysis.any?
    
    pdf.render
  end

  def generate_markdown
    markdown = <<~MD
      # WordPress Plugin Security Report

      **Plugin:** #{@scan.plugin_name}  
      **Scan Date:** #{@scan.created_at.strftime('%B %d, %Y at %I:%M %p')}  
      **Status:** #{@scan.status.humanize}

      ## Summary

      #{generate_summary_markdown}

      ## Vulnerabilities Found

      #{generate_vulnerabilities_markdown}

      #{generate_ai_analysis_markdown if @ai_analysis.any?}

      ---
      *Report generated by WP SecureScan AI*
    MD

    markdown
  end

  def generate_html
    # This will be rendered by the view template
    {
      scan: @scan,
      vulnerabilities: @vulnerabilities,
      ai_analysis: @ai_analysis,
      summary: generate_summary_data
    }
  end

  private

  def parse_ai_analysis
    return {} unless @scan.ai_analysis.present?
    
    begin
      JSON.parse(@scan.ai_analysis)
    rescue JSON::ParserError
      {}
    end
  end

  def add_summary_to_pdf(pdf)
    pdf.text "Summary", size: 18, style: :bold
    pdf.move_down 10
    
    summary = generate_summary_data
    
    pdf.text "Total Vulnerabilities: #{summary[:total_count]}"
    pdf.text "Critical: #{summary[:critical_count]}"
    pdf.text "High: #{summary[:high_count]}"
    pdf.text "Medium: #{summary[:medium_count]}"
    pdf.text "Low: #{summary[:low_count]}"
    pdf.move_down 20
  end

  def add_vulnerabilities_to_pdf(pdf)
    return if @vulnerabilities.empty?
    
    pdf.text "Detailed Findings", size: 18, style: :bold
    pdf.move_down 10
    
    vulnerabilities_by_type = @vulnerabilities.group_by(&:vulnerability_type)
    
    vulnerabilities_by_type.each do |vuln_type, vulns|
      pdf.text vuln_type, size: 14, style: :bold
      pdf.move_down 5
      
      vulns.each_with_index do |vuln, index|
        pdf.text "#{index + 1}. File: #{vuln.file_path} (Line #{vuln.line_number})"
        pdf.text "   Severity: #{vuln.severity.humanize}"
        pdf.text "   Code: #{vuln.code_snippet}"
        pdf.text "   Description: #{vuln.description}"
        pdf.move_down 10
      end
      
      pdf.move_down 15
    end
  end

  def add_ai_analysis_to_pdf(pdf)
    pdf.start_new_page
    pdf.text "AI Security Analysis", size: 18, style: :bold
    pdf.move_down 10
    
    @ai_analysis.each do |vuln_type, analysis|
      pdf.text vuln_type, size: 14, style: :bold
      pdf.move_down 5
      
      pdf.text "Risk Level: #{analysis['risk_level']}"
      pdf.text "Priority: #{analysis['remediation_priority']}"
      pdf.move_down 10
      
      if analysis['analysis'].present?
        pdf.text "Analysis:", style: :bold
        pdf.text analysis['analysis']
        pdf.move_down 15
      end
    end
  end

  def generate_summary_data
    {
      total_count: @vulnerabilities.count,
      critical_count: @vulnerabilities.where(severity: 'critical').count,
      high_count: @vulnerabilities.where(severity: 'high').count,
      medium_count: @vulnerabilities.where(severity: 'medium').count,
      low_count: @vulnerabilities.where(severity: 'low').count,
      files_affected: @vulnerabilities.pluck(:file_path).uniq.count,
      vulnerability_types: @vulnerabilities.pluck(:vulnerability_type).uniq
    }
  end

  def generate_summary_markdown
    summary = generate_summary_data
    
    <<~MD
      - **Total Vulnerabilities:** #{summary[:total_count]}
      - **Critical:** #{summary[:critical_count]}
      - **High:** #{summary[:high_count]}
      - **Medium:** #{summary[:medium_count]}
      - **Low:** #{summary[:low_count]}
      - **Files Affected:** #{summary[:files_affected]}
      - **Vulnerability Types:** #{summary[:vulnerability_types].join(', ')}
    MD
  end

  def generate_vulnerabilities_markdown
    return "No vulnerabilities found." if @vulnerabilities.empty?
    
    markdown = ""
    vulnerabilities_by_type = @vulnerabilities.group_by(&:vulnerability_type)
    
    vulnerabilities_by_type.each do |vuln_type, vulns|
      markdown += "### #{vuln_type}\n\n"
      
      vulns.each_with_index do |vuln, index|
        markdown += <<~VULN
          #{index + 1}. **File:** `#{vuln.file_path}` (Line #{vuln.line_number})
             - **Severity:** #{vuln.severity.humanize}
             - **Code:** `#{vuln.code_snippet}`
             - **Description:** #{vuln.description}

        VULN
      end
      
      markdown += "\n"
    end
    
    markdown
  end

  def generate_ai_analysis_markdown
    return "" if @ai_analysis.empty?
    
    markdown = "## AI Security Analysis\n\n"
    
    @ai_analysis.each do |vuln_type, analysis|
      markdown += "### #{vuln_type}\n\n"
      markdown += "- **Risk Level:** #{analysis['risk_level']}\n"
      markdown += "- **Priority:** #{analysis['remediation_priority']}\n"
      markdown += "- **Affected Files:** #{analysis['affected_files']&.join(', ')}\n\n"
      
      if analysis['analysis'].present?
        markdown += "**Analysis:**\n\n"
        markdown += "#{analysis['analysis']}\n\n"
      end
    end
    
    markdown
  end
end