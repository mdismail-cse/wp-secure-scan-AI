class Vulnerability < ApplicationRecord
  belongs_to :scan
  has_one :user, through: :scan

  validates :file_path, presence: true
  validates :vulnerability_type, presence: true
  validates :severity, presence: true

  enum :severity, {
    low: "low",
    medium: "medium",
    high: "high",
    critical: "critical"
  }

  VULNERABILITY_TYPES = [
    "SQL Injection",
    "Stored XSS",
    "Reflected XSS",
    "Remote Code Execution",
    "CSRF",
    "Broken Access Control",
    "Arbitrary File Upload",
    "Arbitrary File Read",
    "Arbitrary File Write",
    "Arbitrary File Delete",
    "Local File Inclusion",
    "PHP Object Injection",
    "SSRF",
    "Open Redirect",
    "Race Condition",
    "Type Juggling",
    "Sensitive Data Exposure"
  ].freeze

  scope :by_severity, ->(severity) { where(severity: severity) }
  scope :by_type, ->(type) { where(vulnerability_type: type) }
  scope :critical_and_high, -> { where(severity: [ "critical", "high" ]) }

  def display_ai_explanation
    ai_explanation.presence || fallback_explanation
  end

  def display_fix_suggestion
    fix_suggestion.presence || fallback_fix_suggestion
  end

  private

  def fallback_explanation
    case vulnerability_type
    when "SQL Injection"
      "This code appears to construct SQL queries using user input without proper sanitization or parameterization, which could allow attackers to manipulate the database."
    when "Stored XSS", "Reflected XSS"
      "User input is being output to the browser without proper escaping or sanitization, which could allow attackers to inject malicious scripts."
    when "Remote Code Execution"
      "User input is being passed to functions that can execute code, which could allow attackers to run arbitrary commands on the server."
    when "CSRF"
      "This action can be performed without proper CSRF protection, allowing attackers to trick users into performing unintended actions."
    when "Broken Access Control"
      "This functionality lacks proper permission checks, potentially allowing unauthorized users to access restricted features."
    else
      "This code pattern has been identified as potentially vulnerable and should be reviewed for security issues."
    end
  end

  def fallback_fix_suggestion
    case vulnerability_type
    when "SQL Injection"
      "Use WordPress prepared statements with $wpdb->prepare() or parameterized queries to safely handle user input in SQL queries."
    when "Stored XSS", "Reflected XSS"
      "Use WordPress escaping functions like esc_html(), esc_attr(), or wp_kses() to properly sanitize output before displaying to users."
    when "Remote Code Execution"
      "Avoid using dangerous functions like eval(), exec(), or system() with user input. Use safer alternatives and validate all input."
    when "CSRF"
      "Implement WordPress nonce verification using wp_verify_nonce() for all state-changing operations."
    when "Broken Access Control"
      "Add proper permission checks using current_user_can() before allowing access to sensitive functionality."
    else
      "Review this code for security vulnerabilities and implement appropriate security measures based on the specific issue."
    end
  end
end
